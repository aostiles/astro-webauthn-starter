import type { APIRoute } from "astro";
import type { APIContext } from "astro";
import { server } from "@passwordless-id/webauthn";
import { createSession, getCred, getNonce, getUser } from "../../db";
import type {
  AuthenticationEncoded,
  CredentialKey,
} from "@passwordless-id/webauthn/dist/esm/types";

const origin = import.meta.env.PUBLIC_ORIGIN;
const domain = import.meta.env.PUBLIC_DOMAIN;

export const post: APIRoute = async ({ request, cookies }: APIContext) => {
  const data = await request.json();
  const nonce = await getNonce(request, data.challenge);
  const authentication: AuthenticationEncoded = data.auth;

  const credStr = await getCred(request, authentication.credentialId);
  const cred: CredentialKey = JSON.parse(credStr);

  const expected = {
    challenge: nonce, // whatever was randomly generated by the server
    origin: origin,
    userVerified: true,
  };

  try {
    const authenticationParsed = await server.verifyAuthentication(
      authentication,
      cred,
      // @ts-ignore
      expected
    );
    const username = await getUser(request, authenticationParsed.credentialId);
    const sid = await createSession(request, username);
    cookies.set("sid", sid, {
      httpOnly: true,
      secure: true,
      path: "/",
      domain: domain,
      maxAge: 60 * 60 * 24, // 1 day
    });
    return new Response(JSON.stringify({ authentication: "success" }));
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: error }), {
      status: 500,
      headers: {
        "Content-Type": "application/json",
      },
    });
  }
};

// redirect on GET requests. This can happen if the user explicitly navigates to the endpoint.
export const get: APIRoute = async ({ request, redirect }: APIContext) => {
  return redirect("/", 302);
};
